// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM16K.hdl
/**
 * Memory of 16K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:

    //address[12..13], which includes the MSB of the address, will decide which RAM4K to send load=1 to
    //2 bits are used because there are 4 of these RAM4Ks to pick from, so you need a 2 bit code
    DMux4Way(in=load, sel=address[12..13], a=ram0, b=ram1, c=ram2, d=ram3);
    
    //address[0..11], which includes the LSB of the address, will decide which register inside RAM4K to send load to
    //The load here is given by the previous Dmux chip, hence only one of the 4 loads will be 1
    RAM4K(in=in, load=ram0, address=address[0..11], out=ram0out);
    RAM4K(in=in, load=ram1, address=address[0..11], out=ram1out);
    RAM4K(in=in, load=ram2, address=address[0..11], out=ram2out);
    RAM4K(in=in, load=ram3, address=address[0..11], out=ram3out);

    //selecting the correct RAM4K's value using address[12..13] and outputting
    Mux4Way16(a=ram0out, b=ram1out, c=ram2out, d=ram3out, sel=address[12..13], out=out);
}